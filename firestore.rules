rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow anyone to list the blogs collection
    match /blogs {
      allow list: if true;
    }
    
    // Blogs collection - individual document rules
    match /blogs/{blogId} {
      // Allow read for:
      // 1. Anyone (including unauthenticated) for published and public blogs
      // 2. Authenticated users for all blogs (client-side filtering will handle privacy)
      allow read: if (resource.data.status == "published" && resource.data.visibility == "public") ||
                     (request.auth != null);
      
      // Allow create for authenticated users with their UID in the document
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // Allow update/delete only for authenticated users who own the blog
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Page views collection
    match /pageViews/{blogId} {
      // Allow anyone to read page views
      allow read: if true;
      
      // Allow anyone to create or update page views (for incrementing view counts)
      // This enables anonymous users to increment page views
      allow create, update: if true;
      
      // Only allow delete if the user is the owner of the blog
      // We need to check the corresponding blog document to verify ownership
      allow delete: if request.auth != null &&
        request.auth.uid == get(/databases/$(database)/documents/blogs/$(blogId)).data.userId;
    }
    
    // Users collection (for future use)
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}